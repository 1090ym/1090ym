<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://1090ym.github.io</id>
    <title>Mario Yin</title>
    <updated>2020-07-07T21:18:42.374Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://1090ym.github.io"/>
    <link rel="self" href="https://1090ym.github.io/atom.xml"/>
    <subtitle>记录每一天</subtitle>
    <logo>https://1090ym.github.io/images/avatar.png</logo>
    <icon>https://1090ym.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Mario Yin</rights>
    <entry>
        <title type="html"><![CDATA[递归总结]]></title>
        <id>https://1090ym.github.io/post/di-gui-zong-jie/</id>
        <link href="https://1090ym.github.io/post/di-gui-zong-jie/">
        </link>
        <updated>2020-07-07T20:53:39.000Z</updated>
        <content type="html"><![CDATA[<h2 id="递归总结">递归总结</h2>
<h3 id="递归三大要素">递归三大要素</h3>
<h5 id="第一要素明确这个函数想要干什么">第一要素：明确这个函数想要干什么</h5>
<p>这个函数的功能是什么，不管代码怎么实现，先明确这个函数是用来干什么的。</p>
<h5 id="第二要素寻找递归结束条件">第二要素：寻找递归结束条件</h5>
<p>我们需要找出当参数为啥时，递归结束，然后返回结果。我们必须更具这个参数的值，能够知道函数的结果是什么。</p>
<h5 id="第三要素找出函数的等价关系式">第三要素：找出函数的等价关系式</h5>
<p>我们要不断缩小参数的范围，搜小之后，我们可以通过一些辅助的变量或操作，使原函数的结果不变。</p>
<h5 id="例1斐波那契数列">例1：斐波那契数列</h5>
<pre><code class="language-java">int f(int n) {
    if(n &lt;= 2)
        return n;
    return f(n-1) + f(n-2);
}
</code></pre>
<h5 id="案例2青蛙跳台阶">案例2：青蛙跳台阶</h5>
<pre><code class="language-java">int f(int n) {
    if(n &lt;= 2)
        return n;
    return f(n-1) + f(n-2);
}
</code></pre>
<h5 id="案例3反转单链表">案例3：反转单链表</h5>
<pre><code class="language-java">class Node {
    int data;
    Node next;
}
Node reverseList(Node head) {
    if(head == null || head.next == null)
        return head;
    Node newNode = new Node();
    newNode = reverseList(head.next);
    
    head.next.next = head;
    head.next = null;
    return newNode;
}
</code></pre>
<h3 id="递归优化思路">递归优化思路</h3>
<h5 id="1-考虑是否重复计算">1、考虑是否重复计算</h5>
<p>把中间的计算结果保存起来，下次进行计算时，判断是否计算过，如果计算过，直接取出来使用就行了，没有计算过，再递归计算。</p>
<h5 id="2-考虑是否可以自底向上">2、考虑是否可以自底向上</h5>
<p>当n比较大时，从上往下递归可能会导致栈空间不太够用，这种情况可以考虑自底向上的做法，也叫做递推。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java学习篇]]></title>
        <id>https://1090ym.github.io/post/java-xue-xi-pian/</id>
        <link href="https://1090ym.github.io/post/java-xue-xi-pian/">
        </link>
        <updated>2020-03-11T15:44:14.000Z</updated>
        <content type="html"><![CDATA[<h2 id="第一章-基本程序设计">第一章 基本程序设计</h2>
<h3 id="输入输出">输入输出</h3>
<ul>
<li>
<p>标准输入输出流：</p>
<ul>
<li>System.out：标准输出流OutputStream的对象</li>
<li>Seytem.in：标准输入流类InputStream的对象</li>
</ul>
</li>
<li>
<p>Scanner类：<code>Scanner scanner = new Scanner(System.in)</code></p>
</li>
<li>
<p>标识符由字母，下划线，数字，美元符号组成</p>
<ul>
<li>必须以字母，下划线，美元符号开头</li>
<li>不能是保留字</li>
</ul>
</li>
<li>
<p>常量：<code>final datatype CONSTANT_NAME = value</code>,常量的声明和初始化必须同时完成</p>
</li>
<li>
<p>数据类型</p>
<ul>
<li>基本类型
<ul>
<li>整数类型：<code>byte，short，int，long</code></li>
<li>字符类型：<code>char</code></li>
<li>逻辑类型：<code>boolean</code></li>
</ul>
</li>
<li>引用类型：类<code>class</code>，接口<code>interface</code>，数组<code>array</code></li>
</ul>
</li>
<li>
<p>避免精度损失，数据转换总是向较大的数据类型进行转换。</p>
</li>
<li>
<p>将值赋给较小范围的变量时，必须使用强制类型转换</p>
</li>
<li>
<p><code>byte&lt;char&lt;short&lt;int&lt;long&lt;float&lt;double</code></p>
</li>
<li>
<p>操作上溢：infinity，操作下溢：0，0.0除0.0等于<code>NaN</code></p>
</li>
<li></li>
<li>
<p>从对话框获得输入：<code>import Javax.swing.JOptionPane</code></p>
<pre><code class="language-java">String string = JOptionPane.showInputDialog(&quot;hello world&quot;)
</code></pre>
</li>
</ul>
<h3 id="选择">选择</h3>
<ul>
<li>
<pre><code class="language-java">//圆括号内必须是求值结果为boolean的表达式
//if语句
if(bool-expression)
	statement
//if-else,else与最近的匹配
 if(bool-expressiom)
     statement1
 else
     statement2
     
 //switch语句
 switch(expression){
     case value1:
		statesment(s);
		break;
	case value2:
		statement(s);
		break;
	···
    default:
		statement(s);
 }
</code></pre>
</li>
<li>
<p>操作符的优先级</p>
</li>
<li>
<p>操作数的优先级：操作数从左至右进行运算</p>
</li>
</ul>
<h2 id="第二章-数学函数字符串">第二章 数学函数，字符串</h2>
<h3 id="math类">Math类</h3>
<blockquote>
<p>math 是final类，在Java.lang.Math中，所有的数学函数都是静态方法</p>
</blockquote>
<ul>
<li>数学常量：PI，E</li>
<li>三角函数：<code>sin cos tan asin acos atan toRadians toDigrees</code></li>
<li>指数：<code>exp log log10 pow sqrt</code></li>
<li>取整：<code>ceil floor round</code></li>
<li>其他：<code>min max abs random([0.0, 1.0)</code></li>
</ul>
<h3 id="生成随机字符">生成随机字符</h3>
<ul>
<li><code>a + (int)Math.random()*b 返回[a, a+b)</code></li>
<li><code>a + (int)Math.random()*(b+1) 放回[a, a+b]</code></li>
</ul>
<h3 id="生成随机字符-2">生成随机字符</h3>
<ul>
<li><code>char('a' + (int)Math.random()*('z' - 'a'+1))</code></li>
</ul>
<h3 id="字符的比较和测试character类">字符的比较和测试：character类</h3>
<ul>
<li><code>isDigit</code></li>
<li><code>isLetter</code></li>
<li><code>isLetterOrDigit</code></li>
<li><code>isLowercase</code></li>
<li><code>isUpperCase</code></li>
<li><code>toLowercase</code></li>
<li><code>toUpperCase</code></li>
</ul>
<h3 id="string类final类不能被继承">String类：final类，不能被继承</h3>
<ul>
<li>
<p>构造：<code>String str = new String(&quot;welcome&quot;);</code></p>
</li>
<li>
<p>简写：<code>String str = &quot;welcome&quot;;</code></p>
</li>
<li>
<p>长度：<code>length</code></p>
</li>
<li>
<p>获取字符：<code>charAt</code></p>
</li>
<li>
<p>连接：<code>concat</code></p>
</li>
<li>
<p>截取：<code>substring</code></p>
</li>
<li>
<p>比较：<code>equals equalsIngnoreCase compareTo startWith endWith regionMatch</code>、</p>
</li>
<li>
<p>转换：<code>toLowerCase, toUpperCase, trim, replace</code></p>
</li>
<li>
<p>查找：<code>indexOf, lastIndexOf</code></p>
</li>
<li>
<p>字符串和数组转换：<code>getChar, toCharArray</code></p>
</li>
<li>
<p>字符串和数字间转换：<code>valueOf</code></p>
</li>
</ul>
<h3 id="规范字符串和常量池">规范字符串和常量池</h3>
<ul>
<li>为了提高效率和优化内存，Java中的字符串字面值维护在字符串常量池中，称为规范字符串</li>
<li>字符串创建后，其内容是不可修改的</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://1090ym.github.io/post-images/1583941650186.png" alt="" loading="lazy"></figure>
<h3 id="字符串的比较">字符串的比较</h3>
<ul>
<li>
<p>equals方法比较字符串的内容是否相同</p>
</li>
<li>
<p>equalsIgnoreCase忽略大小写比较内容是否相同</p>
</li>
<li>
<p>regionMatch比较部分内容是否相同</p>
</li>
<li>
<p>startWith判断是否以某个字符串开始</p>
</li>
<li>
<p>endWith判断是否以某个字符串结束</p>
</li>
<li>
<p>compareTo按照字典序比较两个字符串的大小</p>
</li>
<li>
<p>length获取字符串的长度</p>
</li>
<li>
<p>charAt(index)获取指定位置的字符</p>
</li>
<li>
<p>concat用于连接两个字符串，相当于+号、</p>
</li>
<li>
<p>subString(begin, end)：返回begin到end-1的子串</p>
</li>
<li>
<p>indeOf(string, index)：返回字符串中匹配的位置，-1表示未找到</p>
</li>
<li>
<p>valueOf(type)：基本数据类型转换为字符串</p>
</li>
<li>
<p>字符串转换为基本类型：使用包装类<code>Double.parseDouble(str), Integer.parseInteger(str)</code></p>
</li>
</ul>
<h3 id="stringbuffer与stringbuilderfinal类">StringBuffer与StringBuilder：final类</h3>
<figure data-type="image" tabindex="2"><img src="https://1090ym.github.io/post-images/1583941659980.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://1090ym.github.io/post-images/1583941667010.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[计算机系统结构 第一章]]></title>
        <id>https://1090ym.github.io/post/ji-suan-ji-xi-tong-jie-gou-di-yi-zhang/</id>
        <link href="https://1090ym.github.io/post/ji-suan-ji-xi-tong-jie-gou-di-yi-zhang/">
        </link>
        <updated>2020-03-10T13:42:43.000Z</updated>
        <content type="html"><![CDATA[<h4 id="系统结构基础">系统结构基础</h4>
<ul>
<li>理论基础：图灵机
<ul>
<li>处理：读写头</li>
<li>存储：无限长的带子</li>
<li>传输：带子的移动</li>
</ul>
</li>
<li>结构基础：冯诺伊曼结构</li>
<li>物质基础：摩尔定律</li>
</ul>
<h4 id="加快经常性事件">加快经常性事件</h4>
<ul>
<li>
<p>CISC</p>
<ul>
<li>采用新指令</li>
<li>用硬件替代软件，指令替代子程序</li>
<li>复杂的指令集</li>
<li>复杂的指令集</li>
<li>较少的寄存器</li>
<li>简洁的软件代码</li>
</ul>
</li>
<li>
<p>RISC</p>
<ul>
<li>90%的时间使用的是10%的指令</li>
<li>精简的指令集</li>
<li>更简单的硬件</li>
<li>较多的寄存器</li>
<li>更多的软件代码</li>
</ul>
</li>
<li>
<p>高速缓存Cache</p>
<ul>
<li>利用局部性原理</li>
<li>使访存的速度和处理器的速度匹配</li>
</ul>
</li>
</ul>
<h4 id="amdahl定律">Amdahl定律</h4>
<ul>
<li>
<p>加速比：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mi>n</mi></msub><mo>=</mo><mfrac><mrow><mi mathvariant="normal">新</mi><mi mathvariant="normal">速</mi><mi mathvariant="normal">度</mi></mrow><mrow><mi mathvariant="normal">老</mi><mi mathvariant="normal">速</mi><mi mathvariant="normal">度</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><mi mathvariant="normal">新</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">间</mi></mrow><mrow><mi mathvariant="normal">老</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">间</mi></mrow></mfrac><mo>=</mo><mfrac><msub><mi>T</mi><mi>o</mi></msub><msub><mi>T</mi><mi>n</mi></msub></mfrac></mrow><annotation encoding="application/x-tex">S_n = \frac{新速度}{老速度} = \frac{新时间}{老时间} = \frac{T_o}{T_n}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.363em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.677em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">老</span><span class="mord cjk_fallback">速</span><span class="mord cjk_fallback">度</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">新</span><span class="mord cjk_fallback">速</span><span class="mord cjk_fallback">度</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.363em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.677em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">老</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">间</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">新</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">间</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.19633em;vertical-align:-0.8360000000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">o</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
</li>
<li>
<p>基本Amdahl定律：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mi>n</mi></msub><mo>=</mo><mfrac><mn>1</mn><mrow><mo>(</mo><mn>1</mn><mo>−</mo><msub><mi>F</mi><mi>e</mi></msub><mo>)</mo><mo>+</mo><mfrac><msub><mi>F</mi><mi>e</mi></msub><msub><mi>S</mi><mi>e</mi></msub></mfrac></mrow></mfrac></mrow><annotation encoding="application/x-tex">S_n = \frac{1}{(1-F_e)+\frac{F_e}{S_e}}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.544971em;vertical-align:-1.223531em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.221569em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8884309999999999em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.05764em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.4101em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.44509999999999994em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.223531em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>F</mi><mi>e</mi></msub><mi mathvariant="normal">：</mi><mi mathvariant="normal">被</mi><mi mathvariant="normal">改</mi><mi mathvariant="normal">进</mi><mi mathvariant="normal">部</mi><mi mathvariant="normal">分</mi><mi mathvariant="normal">原</mi><mi mathvariant="normal">执</mi><mi mathvariant="normal">行</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">间</mi><mi mathvariant="normal">占</mi><mi mathvariant="normal">原</mi><mi mathvariant="normal">总</mi><mi mathvariant="normal">时</mi><mi mathvariant="normal">间</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">百</mi><mi mathvariant="normal">分</mi><mi mathvariant="normal">比</mi></mrow><annotation encoding="application/x-tex">F_e：被改进部分原执行时间占原总时间的百分比

</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">被</span><span class="mord cjk_fallback">改</span><span class="mord cjk_fallback">进</span><span class="mord cjk_fallback">部</span><span class="mord cjk_fallback">分</span><span class="mord cjk_fallback">原</span><span class="mord cjk_fallback">执</span><span class="mord cjk_fallback">行</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">间</span><span class="mord cjk_fallback">占</span><span class="mord cjk_fallback">原</span><span class="mord cjk_fallback">总</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">间</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">百</span><span class="mord cjk_fallback">分</span><span class="mord cjk_fallback">比</span></span></span></span></span></p>
</li>
</ul>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mi>e</mi></msub><mi mathvariant="normal">：</mi><mi mathvariant="normal">被</mi><mi mathvariant="normal">改</mi><mi mathvariant="normal">进</mi><mi mathvariant="normal">部</mi><mi mathvariant="normal">分</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">部</mi><mi mathvariant="normal">件</mi><mi mathvariant="normal">加</mi><mi mathvariant="normal">速</mi><mi mathvariant="normal">比</mi></mrow><annotation encoding="application/x-tex">
  S_e：被改进部分的部件加速比
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord cjk_fallback">：</span><span class="mord cjk_fallback">被</span><span class="mord cjk_fallback">改</span><span class="mord cjk_fallback">进</span><span class="mord cjk_fallback">部</span><span class="mord cjk_fallback">分</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">部</span><span class="mord cjk_fallback">件</span><span class="mord cjk_fallback">加</span><span class="mord cjk_fallback">速</span><span class="mord cjk_fallback">比</span></span></span></span></span></p>
<ul>
<li>
<p>Amdahl定律的性能递减规则：</p>
<ul>
<li>如果仅仅对计算机中的一部分进行性能改进，则改进越多，提升的性能越有限。</li>
<li>为使系统获得较高的加速比，可增强部分必须占有较大比例。</li>
</ul>
</li>
</ul>
<h4 id="cpu性能公式">CPU性能公式</h4>
<ul>
<li>CPU时间　＝　IC　＊　CPI　＊　时钟周期时间</li>
</ul>
<h4 id="局部性原理">局部性原理</h4>
<ul>
<li>时间局部性：一个信息项正在被访问,那么近期它有可能再次被访问。</li>
<li>空间局部性：程序即将用到的信息很可能与目前正在使用的信息在空间上相邻。</li>
<li>高速缓存Cache利用了空间局部性。</li>
</ul>
<h4 id="并行性">并行性</h4>
<ul>
<li>处理数据角度：字串位串，字串位并，字并位串，全并行</li>
<li>执行程序角度：指令内部并行，指令级并行，线程级并行，任务级或过程级并行，作业或程序级并行。</li>
<li>提高并行性:
<ul>
<li>时间重叠</li>
<li>资源重复</li>
<li>资源共享</li>
</ul>
</li>
</ul>
<h4 id="计算机系统评价">计算机系统评价</h4>
<ul>
<li>性能（快）
<ul>
<li>用户角度：响应时间</li>
<li>管理员角度：吞吐率</li>
<li>MIPS</li>
<li>程序执行时间</li>
<li>MFLOPS</li>
<li>基准测试程序</li>
<li>基准测试程序套件</li>
</ul>
</li>
<li>成本</li>
<li>功耗
<ul>
<li>云端：电力成本</li>
<li>终端：待机时间</li>
</ul>
</li>
<li>可靠性
<ul>
<li>MTTF</li>
</ul>
</li>
</ul>
<h4 id="冯诺依曼结构的改进">冯诺依曼结构的改进</h4>
<ul>
<li>输入输出方式的改进：
<ul>
<li>程序控制
<ul>
<li>程序等待</li>
<li>程序中断</li>
</ul>
</li>
<li>DMA直接访问存储器</li>
<li>I／O处理机</li>
</ul>
</li>
<li>采用并行处理技术</li>
<li>存储器：采用相联存储器，通用寄存器组，高速缓冲存储器</li>
<li>指令系统：CISC，RISC</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JAVA学习篇：环境搭建]]></title>
        <id>https://1090ym.github.io/post/java-xue-xi-pian-huan-jing-da-jian/</id>
        <link href="https://1090ym.github.io/post/java-xue-xi-pian-huan-jing-da-jian/">
        </link>
        <updated>2020-03-04T15:37:01.000Z</updated>
        <content type="html"><![CDATA[<h2 id="语言特征">语言特征</h2>
<ul>
<li>简单：源于c++，进行简化</li>
<li>面向对象：没有全局变量，全局函数等</li>
<li>分布式：可基于Java RMI，Java RPC编写分布式程序</li>
<li>解释性：编译成字节码，在java虚拟机上运行</li>
<li>健壮性：取消指针，垃圾自动回收，异常处理</li>
<li>安全性：安全机制保护</li>
<li>可移植性好</li>
<li>高性能：分布式计算，高并发</li>
<li>多线程</li>
<li>与体系结构无关</li>
</ul>
<h2 id="java版本">java版本</h2>
<ul>
<li>Java SE：适用于开发桌面java程序</li>
<li>Java EE：适用于开发服务端java程序</li>
<li>Java ME：移动是被和嵌入式设备</li>
</ul>
<h2 id="java运行环境jvm">Java运行环境：JVM</h2>
<figure data-type="image" tabindex="1"><img src="https://1090ym.github.io/post-images/1583337471554.jpg" alt="" loading="lazy"></figure>
<h2 id="安装jdk创建-编译和执行jav程序">安装JDK，创建、编译和执行Jav程序</h2>
<ol>
<li>下载稳定版java SE：<a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html">https://www.oracle.com/technetwork/java/javase/downloads/index.html</a></li>
<li>下载API帮助文档</li>
<li>安装JDK</li>
<li>配置环境变量：新建环境变量JAVA_HOME，然后把JDK安装路径添加到JAVA_HOME环境变量中</li>
<li>再将%JAVA_HOME%/bin添加到环境变量PATH中</li>
<li>在cmd中输入java -version查看是否安装成功<br>
<img src="https://1090ym.github.io/post-images/1583337972049.jpg" alt="" loading="lazy"></li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git入门]]></title>
        <id>https://1090ym.github.io/post/git-ru-men/</id>
        <link href="https://1090ym.github.io/post/git-ru-men/">
        </link>
        <updated>2020-03-03T04:44:11.000Z</updated>
        <content type="html"><![CDATA[<h2 id="创建git仓库">创建git仓库</h2>
<pre><code>mkdir 仓库名
</code></pre>
<h2 id="进入目录">进入目录</h2>
<pre><code>cd 目录名
</code></pre>
<h2 id="查看目录">查看目录</h2>
<pre><code>pwd
</code></pre>
<h2 id="命令把这个目录变成git可以管理的仓库">命令把这个目录变成Git可以管理的仓库</h2>
<ul>
<li>第一步，通过<code>git init</code>命令控制仓库</li>
<li>第二步，用命令git add告诉Git，把文件添加到仓库：<code>git add readme.txt</code></li>
<li>第三步，用命令git commit告诉Git，把文件提交到仓库：<code>git commit -m &quot;wrote a readme file&quot;</code></li>
</ul>
<h2 id="查看git工作状态和修改情况">查看git工作状态和修改情况</h2>
<ul>
<li>要随时掌握工作区的状态，使用<code>git status</code>命令。</li>
<li>如果git status告诉你有文件被修改过，用<code>git diff</code>可以查看修改内容</li>
</ul>
<h2 id="git版本回退">git版本回退</h2>
<ul>
<li><code>HEAD</code>指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code></li>
<li>回退到上个版本：<code>git reset --hard HEAD^</code>,上上个版本<code>git reset --hard HEAD^^</code></li>
<li>查看版本id：<code>git log --pretty=oneline</code></li>
<li>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本</li>
<li>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</li>
</ul>
<h2 id="工作区和暂存区">工作区和暂存区</h2>
<ul>
<li><code>git add</code>命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行<code>git commit</code>就可以一次性把暂存区的所有修改提交到分支</li>
</ul>
<p>##撤销和修改</p>
<ul>
<li>当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code></li>
<li>当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了场景1，第二步按场景1操作。</li>
</ul>
<h2 id="删除文件">删除文件</h2>
<ul>
<li>命令<code>git rm filename</code>用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容</li>
<li>恢复：<code>git checkout</code>其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</li>
</ul>
<h2 id="git推送到远程仓库">git推送到远程仓库</h2>
<ul>
<li>
<p>关联远程库： <code>git remote add origin git仓库网址</code> 或者 <code>git remote add origin git@github.com:用户名/git仓库名</code></p>
</li>
<li>
<p>推送本地库到远程库：<code>git push -u origin master</code></p>
</li>
<li>
<p>输入上一步命令后，只要本地做了提交，使用<code>git push origin master</code>就可以把本地master分支的最新修改推送至GitHub</p>
</li>
<li>
<p>注意：如果输入$ git remote add origin git@github.com:djqiang（github帐号名）/gitdemo（项目名）.git <br>
    提示出错信息：fatal: remote origin already exists.<br>
    解决办法如下：</p>
<ul>
<li>1、先输入$ git remote rm origin</li>
<li>2、再输入$ git remote add origin git@github.com:djqiang/gitdemo.git 就不会报错了！</li>
<li>3、如果输入$ git remote rm origin 还是报错的话，error: Could not remove config section 'remote.origin'. 我们需要修改gitconfig文件的内容</li>
<li>4找到你的github的安装路径，找到一个名为gitconfig的文件，打开它把里面的[remote &quot;origin&quot;]那一行删掉就好了！</li>
</ul>
</li>
<li>
<p>克隆远程库<br>
<code>git clone git@github.com:用户名/仓库名.git</code></p>
</li>
</ul>
<h2 id="分支管理">分支管理</h2>
<ul>
<li>
<p>Git鼓励大量使用分支：</p>
</li>
<li>
<p>查看分支：<code>git branch</code></p>
</li>
<li>
<p>创建分支：<code>git branch &lt;name&gt;</code></p>
</li>
<li>
<p>切换分支：<code>git checkout &lt;name&gt;</code>或者<code>git switch &lt;name&gt;</code></p>
</li>
<li>
<p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code>或者<code>git switch -c &lt;name&gt;</code></p>
</li>
<li>
<p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p>
</li>
<li>
<p>删除分支：<code>git branch -d &lt;name&gt;</code></p>
</li>
</ul>
<h2 id="git分支合并出现冲突">git分支合并出现冲突</h2>
<ul>
<li>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成</li>
<li>解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。</li>
<li>用<code>git log --graph --pretty=oneline --abbrev-commit</code>命令可以看到分支合并图。</li>
</ul>
<h2 id="git暂存分支">git暂存分支</h2>
<ul>
<li>先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场</li>
<li>在master分支上修复的bug，想要合并到当前dev分支，可以用git cherry-pick <commit>命令，把bug提交的修改“复制”到当前分支，避免重复劳动</li>
</ul>
<h2 id="查看远程库">查看远程库</h2>
<ul>
<li>查看远程库信息：<code>git remote -v</code></li>
<li>推送本地分支：<code>$ git push origin master</code></li>
<li>克隆远程分支：<code>git clone git@github.com:用户名/仓库名.git</code></li>
<li>创建远程origin的dev分支到本地：<code>git checkout -b dev origin/dev</code></li>
<li>多人协作
<ul>
<li>
<p>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</p>
</li>
<li>
<p>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</p>
</li>
<li>
<p>如果合并有冲突，则解决冲突，并在本地提交；</p>
</li>
<li>
<p>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</p>
</li>
<li>
<p>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。</p>
</li>
</ul>
</li>
</ul>
<h3 id="出现的问题">出现的问题：</h3>
<ul>
<li>出现错误：fatal: refusing to merge unrelated histories
<ul>
<li>因为两个分支没有取得连续：<code>git pull origin master --allow-unrelated-histories</code></li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[第一篇博客]]></title>
        <id>https://1090ym.github.io/post/di-yi-pian-bo-ke/</id>
        <link href="https://1090ym.github.io/post/di-yi-pian-bo-ke/">
        </link>
        <updated>2020-03-03T04:37:21.000Z</updated>
        <summary type="html"><![CDATA[<p>📝开始写博客啦。😄❤️</p>
]]></summary>
        <content type="html"><![CDATA[<p>📝开始写博客啦。😄❤️</p>
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://1090ym.github.io/post/hello-gridea/</id>
        <link href="https://1090ym.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>